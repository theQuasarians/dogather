(()=>{var e={2043:function(e,o,t){var r,n;!function(a,i){"use strict";r=function(){var e=function(){},o="undefined",t=typeof window!==o&&typeof window.navigator!==o&&/Trident\/|MSIE /.test(window.navigator.userAgent),r=["trace","debug","info","warn","error"],n={},a=null;function i(e,o){var t=e[o];if("function"==typeof t.bind)return t.bind(e);try{return Function.prototype.bind.call(t,e)}catch(o){return function(){return Function.prototype.apply.apply(t,[e,arguments])}}}function s(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function l(r){return"debug"===r&&(r="log"),typeof console!==o&&("trace"===r&&t?s:void 0!==console[r]?i(console,r):void 0!==console.log?i(console,"log"):e)}function c(){for(var t=this.getLevel(),n=0;n<r.length;n++){var a=r[n];this[a]=n<t?e:this.methodFactory(a,t,this.name)}if(this.log=this.debug,typeof console===o&&t<this.levels.SILENT)return"No console available for logging"}function u(e){return function(){typeof console!==o&&(c.call(this),this[e].apply(this,arguments))}}function d(e,o,t){return l(e)||u.apply(this,arguments)}function g(e,t){var i,s,l,u=this,g="loglevel";function f(e){var t=(r[e]||"silent").toUpperCase();if(typeof window!==o&&g){try{return void(window.localStorage[g]=t)}catch(e){}try{window.document.cookie=encodeURIComponent(g)+"="+t+";"}catch(e){}}}function p(){var e;if(typeof window!==o&&g){try{e=window.localStorage[g]}catch(e){}if(typeof e===o)try{var t=window.document.cookie,r=encodeURIComponent(g),n=t.indexOf(r+"=");-1!==n&&(e=/^([^;]+)/.exec(t.slice(n+r.length+1))[1])}catch(e){}return void 0===u.levels[e]&&(e=void 0),e}}function h(){if(typeof window!==o&&g){try{window.localStorage.removeItem(g)}catch(e){}try{window.document.cookie=encodeURIComponent(g)+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC"}catch(e){}}}function v(e){var o=e;if("string"==typeof o&&void 0!==u.levels[o.toUpperCase()]&&(o=u.levels[o.toUpperCase()]),"number"==typeof o&&o>=0&&o<=u.levels.SILENT)return o;throw new TypeError("log.setLevel() called with invalid level: "+e)}"string"==typeof e?g+=":"+e:"symbol"==typeof e&&(g=void 0),u.name=e,u.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},u.methodFactory=t||d,u.getLevel=function(){return null!=l?l:null!=s?s:i},u.setLevel=function(e,o){return l=v(e),!1!==o&&f(l),c.call(u)},u.setDefaultLevel=function(e){s=v(e),p()||u.setLevel(e,!1)},u.resetLevel=function(){l=null,h(),c.call(u)},u.enableAll=function(e){u.setLevel(u.levels.TRACE,e)},u.disableAll=function(e){u.setLevel(u.levels.SILENT,e)},u.rebuild=function(){if(a!==u&&(i=v(a.getLevel())),c.call(u),a===u)for(var e in n)n[e].rebuild()},i=v(a?a.getLevel():"WARN");var m=p();null!=m&&(l=v(m)),c.call(u)}(a=new g).getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var o=n[e];return o||(o=n[e]=new g(e,a.methodFactory)),o};var f=typeof window!==o?window.log:void 0;return a.noConflict=function(){return typeof window!==o&&window.log===a&&(window.log=f),a},a.getLoggers=function(){return n},a.default=a,a},void 0===(n="function"==typeof r?r.call(o,t,o,e):r)||(e.exports=n)}()}},o={};function t(r){var n=o[r];if(void 0!==n)return n.exports;var a=o[r]={exports:{}};return e[r].call(a.exports,a,a.exports,t),a.exports}t.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return t.d(o,{a:o}),o},t.d=(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{"use strict";var e=t(2043),o=t.n(e);o().setLevel("error");const r=o(),n="corsOn",a="captureOn";r.debug("modify background script is loaded");const i=function(){let e=null;const o=navigator.userAgent.search("Chrome"),t=navigator.userAgent.search("Firefox"),r=navigator.userAgent.search("MSIE 8.0"),n=navigator.userAgent.search("MSIE 9.0");return o>-1?e="Chrome":t>-1?e="Firefox":n>-1?e="MSIE 9.0":r>-1&&(e="MSIE 8.0"),e}();r.debug("browser is "+i);const s="Chrome"===i;r.debug("ischrome"+s),chrome&&chrome.runtime?r.debug("it is in chrome environment"):r.debug("it should be browser environment");const l={allowOrigin:"Access-Control-Allow-Origin",allowHeaders:"Access-Control-Allow-Headers",allowMethods:"Access-Control-Allow-Methods",allowCredentials:"Access-Control-Allow-Credentials",exposeHeaders:"Access-Control-Expose-Headers"},c="GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH",u=[{id:1,priority:1,action:{type:"modifyHeaders",requestHeaders:[{header:"Origin",operation:"set",value:""}]},condition:{excludedRequestDomains:["api.moesif.net","api-dev.moesif.net"],resourceTypes:["xmlhttprequest"]}},{id:2,priority:1,action:{type:"modifyHeaders",responseHeaders:[{header:"Access-Control-Allow-Origin",operation:"set",value:"*"},{header:"Access-Control-Allow-Headers",operation:"set",value:"*"},{header:"Access-Control-Allow-Methods",operation:"set",value:c},{header:"Access-Control-Allow-Credentials",operation:"set",value:"false"},{header:"Access-Control-Expose-Headers",operation:"set",value:"*"}]},condition:{excludedRequestDomains:["api.moesif.net","api-dev.moesif.net"],resourceTypes:["xmlhttprequest"]}}];async function d(e){try{const t=e.requestOrigin,n=e.domainList,a=e.allowOrigin||"*",i=e.allowHeaders||"*",s=e.allowMethods||"*",d=e.allowCredentials||"false",g=e.exposeHeaders||"",[f]=await chrome.tabs.query({active:!0}),p=f?.url;r.debug("active tab url is: "+p);const h=function(e){try{const o=new URL(e);return`${o.protocol}//${o.hostname}`}catch(e){return null}}(p),v=JSON.parse(JSON.stringify(u));v.forEach((e=>{if(n){const o=n.split(",").map((e=>e.trim().toLowerCase())).filter(Boolean);o.length>=1&&(e.condition.requestDomains=o)}})),v[1].action.responseHeaders=Object.entries(l).map((([e,o])=>{switch(o){case l.allowOrigin:return"true"!==d||"*"!==a||h||(r='When Allow-Credentials is set to throw, you can not use wild card for Access-Control-Allow-Origin like "*".',chrome.runtime.sendMessage({type:"backgroundError",message:r,error:n,timestamp:(new Date).valueOf()}),t='When Allow-Credentials is set to throw, you can not use wild card for Access-Control-Allow-Origin like "*".',chrome.notifications.create({type:"basic",iconUrl:"icon-16.png",title:"Error in Extension",message:t,priority:2})),"*"===a&&"true"===d?{header:o,operation:"set",value:h||"*"}:{header:o,operation:"set",value:a};case l.allowMethods:return"*"===s&&"true"===d?{header:o,operation:"set",value:c}:{header:o,operation:"set",value:s||c};case l.allowCredentials:return d&&"true"===d?{header:o,operation:"set",value:"true"}:{header:o,operation:"remove"};case l.allowHeaders:return"*"===i&&"true"===d?{header:o,operation:"set",value:"Content-Type, Authorization, X-Requested-With, X-CSRF-Token, Accept, Accept-Language, User-Agent, If-Modified-Since"}:{header:o,operation:"set",value:i};case l.exposeHeaders:return{header:o,operation:"set",value:g};default:return null}var t,r,n})).filter(Boolean),null==(o=t)||""===o.trim()?v.shift():v[0].action.requestHeaders[0].value=t;const m=await chrome.declarativeNetRequest.getDynamicRules();r.debug("found existing rules to remove: "+JSON.stringify(m)),r.debug("final rules to be set: "+JSON.stringify(v,null,"  "));const y=m?m.map((e=>e.id)):[];return chrome.declarativeNetRequest.updateDynamicRules({addRules:v,removeRuleIds:y})}catch(e){r.error("Error loading rules:",e)}var o}async function g(e){if(e)return d(e);return d(await async function(){const e=await chrome.storage.local.get(["options"]);return e&&e.options||{}}())}async function f(){try{const e=await chrome.storage.local.get([n,a,"options"]),o=e.options,t=e[n],i=e[a]&&!!o?.moesifApplicationId;t?(r.debug("trying to turn on CORS"),g(o)):(r.debug("trying to turn off CORS"),async function(){const e=await chrome.declarativeNetRequest.getDynamicRules();r.debug("found existing rules to remove: "+JSON.stringify(e));const o=e?e.map((e=>e.id)):[];if(o&&!(o.length<=0))chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:o})}()),t&&i?(chrome.action.setBadgeText({text:"Both"}),chrome.action.setBadgeTextColor({color:"#FFF"}),chrome.action.setBadgeBackgroundColor({color:"#FF0000"})):t||i?t?(chrome.action.setBadgeText({text:"Cors"}),chrome.action.setBadgeTextColor({color:"#FFF"}),chrome.action.setBadgeBackgroundColor({color:"#a6249f"})):i&&(chrome.action.setBadgeText({text:"Log"}),chrome.action.setBadgeTextColor({color:"#FFF"}),chrome.action.setBadgeBackgroundColor({color:"#b54a14"})):(chrome.action.setBadgeText({text:"Off"}),chrome.action.setBadgeTextColor({color:"#FFF"}),chrome.action.setBadgeBackgroundColor({color:"#888"}))}catch(e){reportError("Error toggle cors",e)}}function p(e){r.debug("about to query for active true"),chrome.tabs.query({active:!0},(o=>{try{r.debug(`about to send ${e.msg} to active tabs`+JSON.stringify(o))}catch(e){r.debug("err"+e)}o.filter((e=>e.url&&0===e.url.indexOf("http"))).forEach((o=>{chrome.tabs.sendMessage(o.id,e)}))}))}r.debug("This is the background page."),r.debug("Put the background scripts here."),r.debug("put backend script here"),chrome.runtime.onMessage.addListener(((e,o,t)=>{switch(r.debug("request in background js message",e.msg),e.msg){case"turnOffCors":case"turnOnCors":f();break;case"refresh":case"turnOnCapture":f(),p(e);break;case"turnOffCapture":f(),function(e){chrome.tabs.query({},(o=>{try{r.debug(`about to ${e.msg} to all tabs`+JSON.stringify(o))}catch(e){r.debug("err"+e)}o.filter((e=>e.url&&0===e.url.indexOf("http"))).forEach((o=>{chrome.tabs.sendMessage(o.id,e)}))}))}(e);break;default:r.debug("received bad message")}})),f()})()})();